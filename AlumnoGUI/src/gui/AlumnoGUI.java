
package gui;

import dao.AlumnoDAOSQL;
import dao.AlumnoDAOTXT;
import dao.DAO;
import dao.DAOException;
import dao.DAOFactory;
import dao.DAOFactoryException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.beanutils.BeanUtils;
import persona.Alumno;
import persona.AlumnoException;
import persona.MiCalendario;
import persona.MiCalendarioException;
import persona.PersonaException;

/**
 *
 * @author gisele.galera
 */
public class AlumnoGUI extends javax.swing.JFrame {
    

    private AlumnoModel aluModel;
    
    private DAO<Alumno, Long> dao = null;
    private AlumnoDAOTXT daoTXT;
    private AlumnoDAOSQL daoSQL;
    
    private Boolean filtro = null;
    
    List<Alumno> alumnos = new ArrayList<>();
    /**
     * Creates new form AlumnoGUI
     * @throws persona.PersonaException
     */
    public AlumnoGUI() throws DAOFactoryException, DAOException {
        initComponents();
        setLocationRelativeTo(null);
        
        setTitle("ABM Alumnos");
        
        jButtonChooser.setVisible(true);

        
        try {
            Map<String, String> config = new HashMap<>();
            
            config.put(DAOFactory.TIPO_DAO, "TXT");                              
            config.put(DAOFactory.FILENAME, "alumnos.txt");
            
            dao = DAOFactory.getIntance().createDAO(config);
            alumnos = dao.findAll(true);
            aluModel = new AlumnoModel();
            // aluModel.setAlumnos(alumnos);
            jTableAlumnos.setModel(aluModel);  // implementacion generica - clase abstracta
 
        } catch (/*AlumnoException | DAO*/Exception ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally {
            if (dao!=null) {
                try {
                    dao.close();
                } catch (DAOException ex) {
                    Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
       
        }
        jCheckBoxFiltroTodos.setSelected(true);
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAlumnos = new javax.swing.JTable();
        jButtonAgregar = new javax.swing.JButton();
        jButtonConsultar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonChooser = new javax.swing.JButton();
        jComboBoxDAOSel = new javax.swing.JComboBox<>();
        jCheckBoxFiltroTodos = new javax.swing.JCheckBox();
        jCheckBoxFiltroActivos = new javax.swing.JCheckBox();
        jCheckBoxFiltroDesactivados = new javax.swing.JCheckBox();
        jTextFieldFullPath = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 204));

        jTableAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableAlumnos);

        jButtonAgregar.setText("Agregar");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        jButtonConsultar.setText("Consultar");
        jButtonConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonModificar.setText("Modificar");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jButtonChooser.setText("...");
        jButtonChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooserActionPerformed(evt);
            }
        });

        jComboBoxDAOSel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TXT", "SQL" }));
        jComboBoxDAOSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDAOSelActionPerformed(evt);
            }
        });

        jCheckBoxFiltroTodos.setText("VerTodos");
        jCheckBoxFiltroTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFiltroTodosActionPerformed(evt);
            }
        });

        jCheckBoxFiltroActivos.setText("Activos");
        jCheckBoxFiltroActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFiltroActivosActionPerformed(evt);
            }
        });

        jCheckBoxFiltroDesactivados.setText("Desactivados");
        jCheckBoxFiltroDesactivados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFiltroDesactivadosActionPerformed(evt);
            }
        });

        jTextFieldFullPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFullPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jComboBoxDAOSel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jTextFieldFullPath, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonChooser)))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jCheckBoxFiltroTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jCheckBoxFiltroActivos, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxFiltroDesactivados)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonChooser)
                    .addComponent(jComboBoxDAOSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFullPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxFiltroTodos)
                    .addComponent(jCheckBoxFiltroActivos)
                    .addComponent(jCheckBoxFiltroDesactivados))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAgregar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModificar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonEliminar)))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true);
        System.out.println("Se abrio el dialogo.");
        alumnoDialog.setVisible(true); // dialogo se queda abierto hasta setvisible en false
            
        Alumno aluNuevo = alumnoDialog.getAlumno();
        if (aluNuevo !=null){
            try {  
                dao.create(aluNuevo);
            } catch (DAOException ex) {
                Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            displayAlumnos();
            // aluModel.refrescarModelo(); 
        }
        else {
            System.out.println("Se pressiono cerrar en el dialogo.");
        }
        System.out.println("Se cerro el dialogo.");
        
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jButtonConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarActionPerformed
        int selectedAlumno = jTableAlumnos.getSelectedRow();
        if (selectedAlumno ==-1) {
            System.out.println("No se ha seleccionado nada.");
        }
        else {
            
            Alumno alu = alumnos.get(selectedAlumno);
            System.out.println("DNI seleecionado ==> " + alu.getDni());
            
            AlumnoDialog alumnoDialog = new AlumnoDialog(this, true);
            alumnoDialog.alu2Dialog(alu);
            System.out.println("Se abrio el dialogo.");
            alumnoDialog.deshabilitarCampos(false);
            alumnoDialog.setVisible(true); // dialogo se queda abierto hasta setvisible en false
            
            Alumno aluModi = alumnoDialog.getAlumno();
            if (aluModi !=null){
                try {
                    /** aluModi = new Alumno(500, "Juan", "Perez", 'M', new MiCalendario(20,2,1987), 
                            new MiCalendario(20,5,1990), 50, 7.55, true);
                    BeanUtils.copyProperties(alu, aluModi);
                    alu.setFechaNac(aluModi.getFechaNac()); **/
                    
                    alu.setApellido(aluModi.getApellido());
                    alu.setNombre(aluModi.getNombre());
                    alu.setFechaNac(aluModi.getFechaNac());
                    alu.setDni(aluModi.getDni());
                    alu.setFechaIngreso(aluModi.getFechaIngreso());
                    alu.setCantMatAprob(aluModi.getCantMatAprob());
                    alu.setPromedio(aluModi.getPromedio());
                    alu.setActivo(aluModi.isActivo());
                    alu.setSexo(aluModi.getSexo());
                    dao.update(alu);
                } catch (PersonaException ex) {
                    Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (DAOException ex) {
                    Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                displayAlumnos();
            }
            else {
                System.out.println("Se pressiono cerrar en el dialogo.");
            }
            System.out.println("Se cerro el dialogo.");
        }
    }//GEN-LAST:event_jButtonConsultarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int selectedAlumno = jTableAlumnos.getSelectedRow();
        if (selectedAlumno ==-1) {
            System.out.println("No se ha seleccionado nada.");
        }
        else {
            int respuesta;
            if (dao instanceof AlumnoDAOTXT) {
                respuesta = JOptionPane.showConfirmDialog(this, "Esta seguro?", "Confirma", JOptionPane.YES_NO_OPTION);
            } else {
                DialogEliminarSQL dialogElminarSQL = new DialogEliminarSQL(this, true);
                System.out.println("Se abrio el dialogo.");
                dialogElminarSQL.setVisible(true); // dialogo se queda abierto hasta setvisible en false
                respuesta = dialogElminarSQL.getRespuesta();
            }
            if (respuesta == 0){ //borrado logico para SQL y TXT
                Alumno alu = alumnos.get(selectedAlumno);
                alumnos.remove(selectedAlumno);
                alu.setActivo(false);
                try {
                    dao.update(alu);
                } catch (DAOException ex) {
                    Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                // aluModel.refrescarModelo(); // refrescar la grilla 
                displayAlumnos();
                
            } else if(respuesta == 1) { //borrado fisico para SQL
                Alumno alu = alumnos.get(selectedAlumno);
                alumnos.remove(selectedAlumno);
                
                try {
                    dao.delete(alu.getDni());
                } catch (DAOException ex) {
                    Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                // aluModel.refrescarModelo(); // refrescar la grilla 
                displayAlumnos();
            } 
        }
            
        
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        int selectedAlumno = jTableAlumnos.getSelectedRow();
        if (selectedAlumno ==-1) {
            System.out.println("No se ha seleccionado nada.");
        }
        else {
            
            Alumno alu = alumnos.get(selectedAlumno);
            System.out.println("DNI seleecionado ==> " + alu.getDni());
            
            AlumnoDialog alumnoDialog = new AlumnoDialog(this, true);
            alumnoDialog.alu2Dialog(alu);
            System.out.println("Se abrio el dialogo.");
            alumnoDialog.habilitarCamposEditables(false);
            alumnoDialog.setVisible(true); // dialogo se queda abierto hasta setvisible en false
            
            Alumno aluModi = alumnoDialog.getAlumno();
            if (aluModi !=null){
                try {
                    alu.setApellido(aluModi.getApellido());
                    alu.setNombre(aluModi.getNombre());
                    alu.setFechaNac(aluModi.getFechaNac());
                    alu.setDni(aluModi.getDni());
                    alu.setFechaIngreso(aluModi.getFechaIngreso());
                    alu.setCantMatAprob(aluModi.getCantMatAprob());
                    alu.setPromedio(aluModi.getPromedio());
                    alu.setActivo(aluModi.isActivo());
                    alu.setSexo(aluModi.getSexo());
                    dao.update(alu);
                } catch (PersonaException | DAOException ex) {
                    Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                displayAlumnos();
            }
            else {
                System.out.println("Se pressiono cerrar en el dialogo.");
            }
            System.out.println("Se cerro el dialogo.");
        }
                             
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooserActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        int opSel = jFileChooser.showOpenDialog(this);
        if (opSel !=JFileChooser.APPROVE_OPTION) {
            return;
        }
        
        jTextFieldFullPath.setText(jFileChooser.getSelectedFile().getAbsolutePath());
        
        Map<String, String> config = new HashMap<>();
        config.put(DAOFactory.TIPO_DAO, "TXT");                              
        config.put(DAOFactory.FILENAME, jTextFieldFullPath.getText());
        try {
            dao = (AlumnoDAOTXT) DAOFactory.getIntance().createDAO(config);
        } catch (DAOFactoryException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        displayAlumnos();
        
    }//GEN-LAST:event_jButtonChooserActionPerformed

    private void displayAlumnos() {
        try {
            
            alumnos = dao.findAll(filtro);
            aluModel.setAlumnos(alumnos);
            
        } catch (DAOException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jTextFieldFullPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFullPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFullPathActionPerformed

    private void jComboBoxDAOSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDAOSelActionPerformed
       if ("TXT".equals((String)jComboBoxDAOSel.getSelectedItem())) {
            jTextFieldFullPath.setVisible(true);
            jButtonChooser.setVisible(true);
        }
        else if ("SQL".equals((String)jComboBoxDAOSel.getSelectedItem())){
            
            jTextFieldFullPath.setVisible(false);
            jButtonChooser.setVisible(false);
            
            BDDialog bDDialog = new BDDialog (this, true);
            jComboBoxDAOSel.setFocusable(false);
            bDDialog.setVisible(true);
            
            Map<String, String> config = new HashMap<>();
            config.put(DAOFactory.TIPO_DAO, DAOFactory.TIPO_DAO_SQL);                              
            config.put(DAOFactory.URL_DB, "jdbc:mysql://localhost:3306/unlam");
            config.put(DAOFactory.USUARIO_DB, bDDialog.getDto().getUser());
            config.put(DAOFactory.PASS_DB, String.valueOf(bDDialog.getDto().getPassword()));
            
            try {
                dao = (AlumnoDAOSQL) DAOFactory.getIntance().createDAO(config);
            } catch (DAOFactoryException ex) {
                Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            displayAlumnos();
        }
    }//GEN-LAST:event_jComboBoxDAOSelActionPerformed

    private void jCheckBoxFiltroDesactivadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFiltroDesactivadosActionPerformed
        if (jCheckBoxFiltroDesactivados.isSelected()){
            filtro = false;
            jCheckBoxFiltroActivos.setSelected(false);
            jCheckBoxFiltroTodos.setSelected(false);
        }
        else {
            filtro = null;
            jCheckBoxFiltroTodos.setSelected(true);
            
        }
        displayAlumnos();   
    }//GEN-LAST:event_jCheckBoxFiltroDesactivadosActionPerformed

    private void jCheckBoxFiltroActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFiltroActivosActionPerformed
        if (jCheckBoxFiltroActivos.isSelected()){
            filtro = true;
            jCheckBoxFiltroDesactivados.setSelected(false);
            jCheckBoxFiltroTodos.setSelected(false);
        }
        else {
            filtro = null;
            jCheckBoxFiltroTodos.setSelected(true);
            
        }
        displayAlumnos();   
    }//GEN-LAST:event_jCheckBoxFiltroActivosActionPerformed

    private void jCheckBoxFiltroTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFiltroTodosActionPerformed
        if (jCheckBoxFiltroTodos.isSelected()){
            filtro = null;
            jCheckBoxFiltroActivos.setSelected(false);
            jCheckBoxFiltroDesactivados.setSelected(false);
        }
        else {
            filtro = null;
            jCheckBoxFiltroTodos.setSelected(true);
            
        }
        displayAlumnos();  
    }//GEN-LAST:event_jCheckBoxFiltroTodosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AlumnoGUI().setVisible(true);
                } catch (DAOFactoryException ex) {
                    Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (DAOException ex) {
                    Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonChooser;
    private javax.swing.JButton jButtonConsultar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JCheckBox jCheckBoxFiltroActivos;
    private javax.swing.JCheckBox jCheckBoxFiltroDesactivados;
    private javax.swing.JCheckBox jCheckBoxFiltroTodos;
    private javax.swing.JComboBox<String> jComboBoxDAOSel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAlumnos;
    private javax.swing.JTextField jTextFieldFullPath;
    // End of variables declaration//GEN-END:variables
}
